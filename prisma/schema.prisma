// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 유저 관련 모델
model Users {
  id        String    @id @default(uuid())
  email     String    @unique
  nickname  String
  password  String
  birthday  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // 관계 설정
  projectMemberships  ProjectMembership[]
  sentInvitations     ProjectInvitation[] @relation("InviterUser") // 보낸 초대
  receivedInvitations ProjectInvitation[] @relation("InviteeUser") // 받은 초대
  adminProjects       Project[]           @relation("ProjectAdmin")
  tokens              Tokens[]
  oAuthProviders      OAuthProvider[]
  credentials         UserCredentials?

  @@index([nickname])
}

// 프로젝트 관련 모델
model Project {
  id                 String              @id @default(uuid())
  name               String
  adminId            String
  memberships        ProjectMembership[]
  categories         Category[]
  projectInvitations ProjectInvitation[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // 관계 설정 - 이것도 relation 이름 명시해야 함
  admin Users @relation("ProjectAdmin", fields: [adminId], references: [id])
}

model ProjectMembership {
  id        String         @id @default(uuid())
  project   Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      Users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      MembershipRole @default(MEMBER)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model ProjectInvitation {
  id                      String           @id @default(uuid())
  project                 Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId               String
  inviter                 Users            @relation("InviterUser", fields: [inviterUserId], references: [id], onDelete: Cascade)
  inviterUserId           String
  invitee                 Users            @relation("InviteeUser", fields: [inviteeUserId], references: [id], onDelete: Cascade)
  inviteeUserId           String
  projectInvitationStatus InvitationStatus @default(PENDING)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt

  @@index([projectId, inviteeUserId])
}

// 인증 관련 모델
model Tokens {
  id                    String   @id @default(uuid())
  user                  Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  accessToken           String   @unique @db.VarChar(512)
  refreshToken          String   @db.VarChar(512)
  isRevoked             Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  refreshTokenExpiresAt DateTime

  @@index([isRevoked, refreshTokenExpiresAt])
}

model OAuthProvider {
  id         String       @id @default(uuid())
  provider   ProviderType
  providerId String
  user       Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createAt   DateTime     @default(now())
  updateAt   DateTime     @updatedAt

  @@unique([provider, providerId])
  @@index([userId, provider])
}

model UserCredentials {
  id           String   @id @default(uuid())
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// 기존 카테고리, 태스크 모델들...
model Category {
  id        String   @id @default(uuid())
  name      String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id              String    @id @default(uuid())
  title           String
  taskStatus      TaskState @default(PENDING)
  check           Boolean   @default(false)
  category        Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      String
  startDate       DateTime
  endDate         DateTime
  actualStartDate DateTime
  actualEndDate   DateTime?
  updatedAt       DateTime  @default(now())
  createdAt       DateTime  @updatedAt

  @@index([categoryId])
}

// Enums
enum MembershipRole {
  OWNER
  MEMBER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum TaskState {
  PENDING
  IN_PROGRESS
  COMPLETE
}

enum ProviderType {
  KAKAO
  GOOGLE
  APPLE
}
